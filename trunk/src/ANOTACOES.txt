TAREFAS PENDENTES:

    - RESOLVER PROBLEMA DO SEGMENTO VERTICAL E A DIVIS√ÉO POR ZERO NA EQUA√á√ÉO REDUZIDA DA RETA EM FUN√á√ÉO
    DE Y.

    - CRIAR ATRIBUTOS DE CORES PARA OS DESENHOS

PROBLEMAS:

	-TRATAR PROBLEMA DE CLICKE EM 2 DESENHOS AO MESMO TEMPO  [RESOLVIDO]
		RESOLVIDO IMPLEMENTANDO MODO DE PROPAGA√á√ÉO DE EVENTO DISTRIBUI_PRIMEIRO_GEOMETRICO, NESSE MODO DE PROPAGA√á√ÉO
     O EVENTO √â PROPAGADO AT√â ENCONTRAR UM DESENHO QUE CONTENHA O PONTO ONDE O EVENTO FOI GERADO, SE NENHUM DESENHO
     FOR SATISFEITO, O EVENTO √â PROPAGADO PARA SEU DESENHO PAI, AT√â CHEGAR AO DESENHO MESTRE.

	-TRATAR PROBLEMA DE SOLICITA√á√ÉO DE REDESENHO DE DOIS      [RESOLVIDO PARCIALMENTE, APENAS UM OBJETO PODE SER SELECIONADO POR VEZ]
    DESENHOS AO MESMO TEMPO (QUEDA DE DESEMPENHO).
		ESTE PROBLEMA FOI RESOLVIDO COM A IMPLEMENTA√á√ÉO DA SOLU√á√ÉO DO PROBLEMA ANTERIOR, POREM, DEVE SER PENSADO SE
    SERA NECESS√ÅRIO SELECIONAR MAIS DE UM DESENHO AO MESMO TEMPO, SE FOR, ESTE PROBLEMA AINDA N√ÉO ESTA RESOLVIDO.


        - PROVAVELMENTE SERA NECESSARIO RESOLVER O PROBLEMA DO REDESENHO SOLICITADO POR MAIS DE UM DESENHO AO MESMO TEMPO, POR
    CAUSA DA COMPOSI√á√ÉO DE DESENHOS.


PERGUNTAS:
         O DESENHO MESTRE DEVE SER UM OBJETO DIFERENTE DOS DESENHOS COMUNS?

ID√âIAS:

	- HIERARQUIA DE DESENHOS REPRESENTADO POR UM GRAFO ENCADEADO, EXISTE UM DESENHO MESTRE QUE ADMINISTRA OS SINAIS E EVENTOS
    RECEBIDOS PELO USUARIO, ESSES SINAIS E EVENTOS S√ÉO PROPAGADOS DE VERTICE A VERTICE AT√â ATINGIR TODOS OS DESENHOS, OU
    A UM DESENHO ESPECIFICO QUE SATISFASSA ALGUMA CONDI√á√ÉO DE ALCANCE DESSE SINAL OU EVENTO QUE ESTA SENDO PROPAGADO. [IMPLEMENTADO]


        - TODOS OS DESENHOS S√ÉO DESENHADOS A PARTIR DE SUAS POSI√á√ïES LOCAIS (OFFSET)
    PELO MOTIVO DE QUE QUANDO SE ALTERA A POSI√á√ÉO DE UM DESENHO, TODOS
    OS DESENHOS QUE EST√ÉO DENTRO DESSE DESENHO TAMBEM SE ALTERAM.  [IMPLEMENTADO]


        - O MAUSEEVENTO √â UM M√âTODO PARA DISTRIBUIR OS SINAIS ENTRE TODOS OS
        DESENHOS. [IMPLEMENTADO]

        - COMPOSI√á√ÉO DE DESENHOS, UM DESENHOS PODE SER COMPOSTO POR V√ÅRIOS OUTROS DESENHOS


ULTIMAS COISAS FEITAS:
    ---------------------------- 20-12-2011 -----------------------------------------
        - LEVANTADO A ID√âIA DO DESENHO MESTRE E A QUEST√ÉO, O DESENHO MESTRE DEVE SER UM OBJETO DIFERENTE DOS DESENHOS COMUNS?

	- CRIADO UM PONTEIRO PARA UM DETERMINADO DESENHO "DESENHO MESTRE" QUE GERENCIA TODOS OS OUTROS DESENHOS, ESSE DESENHO MESTRE √â
    RESPONSAVEL POR RECEBER COMANDOS DO USUARIO OU DOS PROPRIOS DESENHOS E REPASSAR PARA OS OUTROS DESENHOS.

        - CRIADO MOUSE EVENTO

        - CRIADO UM M√âTODO PARA DISTRIBUIR O EVENTO DO MOUSE PARA TODOS DESENHOS

            void mouseEvento(MouseEvento *e, DistrbuicaoMouseEvento distribuicao = DISTRIBUI_TODOS, list<Desenho*> *lista = 0x0) -
             Distribui um evento do mouse para todos desenhos, passando de pai para filho obedecendo a condi√ß√£o de distribui√ß√£o
            distribuicao, come√ßando pelos desenhos que estiverem na lista, se nenhuma lista for passada sera utilizada a lista de
            todos os filhos do desenho em que o metodo foi chamado.

        enum DistrbuicaoMouseEvento
        {
            DISTRIBUI_TODOS,              // Distribui para todos desenhos sem restri√ß√£o
            DISTRIBUI_GEOMETRICO,         // Distribui apenas para os desenhos que contem a posi√ß√£o do mouse quando o evento foi gerado
            DISTRIBUI_PRIMEIRO_GEOMETRICO // Distribui apenas para o primeiro desenho que satisfazer a condi√ß√£o geometrica de cima
        };


	- CRIADO UM M√âTODO QUE DISTRIBUI SINAIS PARA TODOS DESENHOS, ESSES SIANIS ALTERAM AS FLAGS DOS DESENHOS, TAIS COMO A FLAG QUE
    INDICA SE O DESENHO FOI SELECIONADO OU N√ÉO, OU SE ELE ESTA SENDO MOVIDO OU N√ÉO.

            void distribuiSinal(tipoSinal sinal , list<Desenho*> *lista = 0x0) - Distribui um sinal para todos desenhos, passando de pai
        para filho come√ßando pelos desenhos que estiverem na lista, se nenhuma lista for passado, ser√° usado todos os filhos do desenho
        que o metodo foi chamado, nesse caso todos os desenhos que estiverem a um n√≠vel abaixo deste, receberam esse sinal.

            tipoSinal sinal
            {
                SINAL_MOVER_TODOS,             // Ativa movimento para todos
                SINAL_SELECIONAR_TODOS,        // Seleciona todos
                SINAL_DESELECIONAR_TODOS,      // Remove sela√ß√£o de todos
                SINAL_NEGA_SELECIONAR_TODOS    // Inverte a sele√ß√£o de todos
            }


    ---------------------------- 20-12-2011 -----------------------------------------

            ALGUNS DIAS PASSADOS, ALGUMAS MODIFICA√á√ïES FEITAS SEM ANOTA√á√ïES

    ---------------------------- 29-12-2011 -----------------------------------------

        - CRIADO M√âTODOS EM DESENHO:
              globalP() -  RETORNA A POSI√á√ÉO GLOBAL DO DESENHO
              referencialP() -  RETORNA A POSI√á√ÉO DE REFERENCIA DO DESENHO

            ESSES M√âTODOS PERMITEM A DEPENDENCIA FISICA(ESPACIAL) DOS DESENHOS
            COM SEUS PAIS.

        - AJUSTE DE DESENHOS
              QUANDO UM DESENHO FILHOS √â MODIFICADO DE FORMA QUE ELE N√ÉO
            CAIBA MAIS DENTRO DE SEU PAI, SEU PAI DEVE SE ADAPTAR ALTERANDO
            SEU TAMANHO PARA QUE SEU FILHO CONTINUE CABENDO DENTRO DE SEU PAI.
              PARA ISSO FOI CRIADO O M√âTODO:

                    ajusteDesenho( Desenho * d) - faz com que o desenho se ajusta
              modificando sua largura, altura e posi√ß√£o de forma que o desenhos d
              continue fisicamente contido, esse ajuste garante que os outros
              desenhos j√° contidos e n√£o modificados continuem contido fisicamente.

        - ADOTADO PADR√ÉO:
              PARA QUE O AJUSTE FUNCIONE CORRETAMENTE FOI ADOTADO UM PADR√ÉO, TODOS
              OS DESENHOS DEVE TER UM M√âTODO define<NOME_DESENHO>( ), QUE DEFINE AS
              DIMESS√ïES DO DESENHO. PARA O DESENHO BASE O M√âTODO √â:

                    defineDesenho(rPonto posicao, int largura , int altura) - define
               as dimens√µes do desenho fazendo altoAjustes em desenhos superiores(PAIS) de
               forma que o desenho continue contido fisicamente.

        - CRIADO O DESENHO Segmento
            Utilizado equa√ß√£o reduzida da reta para detectar colis√µes com mouse
                x = ( vx/vy ) * y + (x1 - vx/vy * y1 )
                m = vx / vy
                n = x1 - vx/vy * y1
                x = m *y + n

        - CRIADO NOVO ATRIBUTOacaoNovoDesenho
              O ATRIBUTO DO DESENHO PRINCIPAL DO TIPO AcaoNovoDesenho DETERMINA O QUE O
            DESENHO DEVE FAZER QUANDO UM NOVO DESENHO FOR CRIADO.

        - ADOTADO PADR√ÉO:
             TODOS OS DESENHOS TEM UM M√âTODO DE INICIALIZA√á√ÉO QUE DEVE SER CHAMADO POR TODOS
            CONSTRUTORES, ESSE METODO √â DEFINIDO COMO void inicializa<NOME DO DESENHO>();

        enum AcaoNovoDesenho
        {
            ACEITA_NOVOS_DESENHOS,              // Aceita o novos desenhos
            NAO_ACEITA_NOVOS_DESENHOS,          // N√£o aceita novos desenhos (o desenho √© desalocado e uma msg no terminal √© gerada)
            PASSA_NOVO_DESENHO_PARA_DESENHO_PAI // Repassa o novo desenho para seu pai, se n√£o existir pai, ocorre o mesmo que na acao de cima
        };


    ---------------------------- 29-12-2011 -----------------------------------------

    ---------------------------- 02-01-2012 -----------------------------------------

        - CRIANDO POPUP MENUS DO QT







===== Descricoes de classes =====

DesenhoMestre
        Esta clase foi criada para gerenciar os desenhos e permitir que
        eles possam utilizar algumas funcionalidades do QWidget.
Desenho
         Esta classe define como um desenho, em geral deve se comportar.
    Suas principais funÁıes s„o:
    * Determinar quanto de espaÁo da tela um desenho precisa para ser desenhado,
    esta definiÁ„o deve ser feita pelos desenhos filhos utilizando o metodo
    defineDesenho().
    * Determina reaÁıes basicas a um mouseEvento, s„o elas:
           -Quando um desenho È clicado, ele È selecionado, o foco do desenhoMestre
        muda para esse desenho.
           -Quando um desenho recebe um movimento do mouse, e este desenho est· selecionado,
        a sua posiÁ„o È alterada para a posiÁ„o do mouse, atÈ um evento de mousesolto
        for recebido.
           -Quando o metodo novoDesenho(Desenho *d) È chamado, o novo desenho È repassado
        para seu desenho pai, se n„o houver um desenho pai, esse novo desenho È deletado.
        return fabs(( (t->p2->x - t->p1->x)*(t->p3->y - t->p1->y) - (t->p3->x - t->p1->x) * (t->p2->y - t->p1->y))/2);
     }
Container
         Esta classe È a ˙nica classe que pode conter desenhos,
    ela pose conter qualquer tipo de desenho, inclusive um
    outro Container.

DesenhoComposto
         … um tipo de container, porem n„o aceita novos desenhos, apenas desenhos que o compoeram
     , portanto todos os novos desenhos recebidos faram parte do DesenhoComposto e suas reaÁıes
     seram determinadas pelo DesenhoComposto e n„o pelo prÛprio desenho. Para inserir novos
     desenhos, deve-se utilizar o mÈtodo novaComposicao(Desenho *d), o mÈtodo novoDesenho(Desenho *d)
     reage como o da classe Desenho.







Funcionamento dos Eventos:
    Os eventos foram criados para a realizaÁ„o da cominicaÁ„o entre os desenhos, quando um desenho
 sofre alguma modificaÁ„o, geralmente um evento È gerado, avisando essa modificaÁ„o.
    Os eventos s„o distribuidos pelo metodo statico void DistribuiEvento(const Evento &evento, const dList &listaDesenhos)
  este metodo recebe uma lista de desenhos que receberam esse evento.

    A estrutura de eventos funciona da seguinte forma:
        Quando um desenho È modificado, um evento È gerado para todos aqueles desenhos que est„o
  interessados em receber informaÁıes dessa modificaÁ„o.

